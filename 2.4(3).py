import psutil
import sqlite3
from datetime import datetime

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∏ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('system_monitor.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS system_stats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TEXT,
    cpu_load REAL,
    memory_used REAL,
    memory_total REAL,
    disk_used REAL,
    disk_total REAL
)
''')
conn.commit()

# === –§–£–ù–ö–¶–ò–ò ===

# 1. –°–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def collect_data():
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cpu = psutil.cpu_percent(interval=1)
    mem = psutil.virtual_memory()
    disk = psutil.disk_usage('/')

    cursor.execute('''
        INSERT INTO system_stats (timestamp, cpu_load, memory_used, memory_total, disk_used, disk_total)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (timestamp, cpu, mem.used / (1024 ** 3), mem.total / (1024 ** 3),
          disk.used / (1024 ** 3), disk.total / (1024 ** 3)))

    conn.commit()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", timestamp)

# 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
def view_data():
    cursor.execute("SELECT * FROM system_stats ORDER BY id DESC LIMIT 10")
    rows = cursor.fetchall()
    for row in rows:
        print(f"\nüïí {row[1]}")
        print(f"üß† CPU –∑–∞–≥—Ä—É–∑–∫–∞: {row[2]}%")
        print(f"üìä –ü–∞–º—è—Ç—å: {row[3]:.2f}–ì–ë / {row[4]:.2f}–ì–ë")
        print(f"üíæ –î–∏—Å–∫: {row[5]:.2f}–ì–ë / {row[6]:.2f}–ì–ë")

# === –ú–ï–ù–Æ ===
def menu():
    while True:
        print("\n=== –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–† ===")
        print("1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
        print("0. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

        if choice == "1":
            collect_data()
        elif choice == "2":
            view_data()
        elif choice == "0":
            break
        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

menu()
conn.close()
